
# from google.generativeai import GenerativeModel, configure

# Configura Gemini solo una vez
configure(api_key="AIzaSyAVvi2N0McSfzmBiBryYI24gfsjgU1EpYc")
modelo_gemini = GenerativeModel("gemini-2.5-flash")

def generar_prompt(datos_paciente: dict, informes_pdf: list) -> str:
    texto_informes = "\n\n".join(
        [f"Informe '{inf['nombre']}':\n{inf['contenido']}" for inf in informes_pdf]
    )

    prompt = f"""
Eres un m√©dico oftalm√≥logo con experiencia en diagn√≥stico y tratamiento de la retinopat√≠a diab√©tica. Tu tarea es analizar cuidadosamente la siguiente informaci√≥n cl√≠nica y redactar una **recomendaci√≥n profesional, emp√°tica y personalizada para el paciente**.

üßë Datos del paciente:
- Nombre completo: {datos_paciente.get('nombre', '')} {datos_paciente.get('apellido_paterno', '')} {datos_paciente.get('apellido_materno', '')}
- Edad: {datos_paciente.get('edad', '')} a√±os
- Sexo: {datos_paciente.get('sexo', '')}

ü©∫ Par√°metros cl√≠nicos m√°s recientes:
- Nivel de glucosa en sangre: {datos_paciente.get('glucosa', 'No disponible')}
- Presi√≥n arterial: {datos_paciente.get('presion', 'No disponible')}
- S√≠ntomas reportados: {datos_paciente.get('sintomas', 'No registrados')}
- Observaciones m√©dicas: {datos_paciente.get('observaciones_examen', 'No registradas')}

üî¨ Diagn√≥stico por IA:
- Grado de retinopat√≠a diab√©tica: {datos_paciente.get('grado_retinopatia', '')}
- Confianza del modelo: {datos_paciente.get('confianza', 0)}%
- Fecha del diagn√≥stico: {datos_paciente.get('fecha_diagnostico', 'No disponible')}

üìÑ Informes cl√≠nicos adicionales extra√≠dos de documentos PDF:
{texto_informes if texto_informes else "No se encontraron documentos adicionales."}

üîé Tareas que debes realizar:
1. Explica brevemente al paciente en qu√© consiste el diagn√≥stico encontrado.
2. Ofrece recomendaciones claras y espec√≠ficas sobre:
   - Visitas al oftalm√≥logo o retin√≥logo.
   - Controles de glucosa y presi√≥n arterial.
   - Cambios en el estilo de vida.
   - Cualquier medida preventiva para evitar el avance de la retinopat√≠a.
3. Si se detecta un grado avanzado o s√≠ntomas graves, **recomienda acudir a un especialista con urgencia**.
4. Usa un lenguaje comprensible para un paciente, evita t√©rminos t√©cnicos sin explicaci√≥n.

S√© claro, directo, pero tambi√©n emp√°tico. Este mensaje ser√° mostrado al paciente como orientaci√≥n inicial.

Gracias.
""".strip()

    return prompt


def generar_recomendacion(datos_paciente: dict, informes_pdf: list) -> str:
    """
    Llama a Gemini para generar una recomendaci√≥n m√©dica personalizada.

    Par√°metros:
        datos_paciente (dict): Datos cl√≠nicos del paciente.
        informes_pdf (list): Lista de informes PDF extra√≠dos.

    Retorna:
        str: Recomendaci√≥n generada por Gemini.
    """
    prompt = generar_prompt(datos_paciente, informes_pdf)
    try:
        respuesta = modelo_gemini.generate_content(prompt)
        return respuesta.text.strip()
    except Exception as e:
        return f"‚ö†Ô∏è Error al generar recomendaci√≥n: {str(e)}"
